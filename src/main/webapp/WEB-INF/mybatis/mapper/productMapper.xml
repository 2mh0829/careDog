<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">

	<sql id="where-list">
	  <if test="searchKey=='productName'">
	       INSTR(productName, #{searchValue}) &gt; 0
	  </if>
	  <if test="searchKey=='brand'">
	      INSTR(brand, #{searchValue}) &gt; 0 
	  </if>
	</sql>

	<select id="listProduct" parameterType="map" resultType="care.dog.store.Product">
	SELECT * FROM (
		SELECT ROWNUM rnum, tb.* FROM (
			SELECT p.productId, productName, brand, imageFilename, sellingPrice, price, amount, 
			isContinued, mileage, p.categoryId, c.categoryName, nvl(allAmount, 0) allAmount, 
			inputDate, grade
			FROM product p 
			JOIN productCategory c ON p.categoryId = c.categoryId
			LEFT OUTER JOIN productInput i ON p.productId = i.productId
			LEFT OUTER JOIN productReply pr ON p.productId = pr.productId
			LEFT OUTER JOIN (
			    SELECT d.productId, COUNT(*) allAmount
			    from orderDetail d 
			    join payment pm on d.orderId=pm.orderId
			    group by d.productId
			) t ON p.productId=t.productId
			<where>
            	<if test="searchValue != null and searchValue != ''">
					<include refid="where-list"/>
		    	</if>
		    	<if test="categoryId != 0 and categoryId != ''">
		    		c.categoryId=#{categoryId}
		    	</if>
	        </where>
	        <if test="sortField != null and sortField != ''
	        and sortMode != null and sortMode != ''">
	        	ORDER BY ${sortField} ${sortMode}
	        </if>
	<![CDATA[
			) tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>
	</select>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT(*), 0) FROM product p
		JOIN productCategory c
		ON p.categoryId = c.categoryId
		<where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>
	</select>
	 
	<!-- resultType String으로 바꿔야하나 dto가 하나로 정의 되어서? -->
	<select id="readOption" parameterType="Integer" resultType="care.dog.store.Product">
	select p.productId, productName, optionId, optionContent
    FROM product p 
    	join productOption o
    	on p.productId = o.productId
    where p.productId = #{productId}
    ORDER BY productId
	</select>
	
	<select id="readProduct" parameterType="Integer" resultType="care.dog.store.Product">
	SELECT productId, productName, imageFilename, sellingPrice, price, amount, 
		isContinued, mileage, p.categoryId, c.categoryName
	FROM product p 
    	JOIN productCategory c
    	ON p.categoryId = c.categoryId
	where productId = #{productId}
	ORDER BY productId
	</select>
	
	<select id="listProductReply" parameterType="map" resultType="care.dog.store.Reply">
	SELECT * FROM (
		SELECT ROWNUM rnum, tb.* FROM (
			SELECT replyId, replyContent, grade, to_char(created, 'yyyy.mm.dd') created, 
            	productId, memberId 
			FROM productReply
            where productId = #{productId}
			ORDER BY created desc
	<![CDATA[
			) tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>
	</select>
	
	<select id="dataCountReply" parameterType="Integer" resultType="Integer">
	SELECT NVL(COUNT(*), 0) FROM productReply
	where productId = #{productId}
	</select>
	
	<select id="listProductQna" parameterType="map" resultType="care.dog.store.Qna">
	SELECT * FROM (
		SELECT ROWNUM rnum, tb.* FROM (
			SELECT qnaId, question, answer, to_char(qCreated, 'yyyy.mm.dd') qCreated, 
           to_char(aCreated, 'yyyy.mm.dd') aCreated, isAnswered, productId, memberId 
			FROM productQna
            where productId = #{productId}
			ORDER BY qCreated desc
	<![CDATA[
			) tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>
	</select>
	
	<select id="dataCountQna" parameterType="Integer" resultType="Integer">
	SELECT NVL(COUNT(*), 0) FROM productQna
	where productId = #{productId}
	</select>
	
	<insert id="insertCart" parameterType="map"> 
	insert into cart(cartId, amountAll, productId, memberId, optionId)
	values(cart_seq.NEXTVAL, #{amount}, #{productId}, #{memberId}, #{optionId})	
	</insert>
	
	<select id="dataCountCart" parameterType="String" resultType="Integer">
	SELECT NVL(COUNT(*), 0) FROM cart where memberId=#{memberId}
	</select>
	
	<select id="listCart" parameterType="map" resultType="care.dog.store.Cart">
	SELECT * FROM (
		SELECT ROWNUM rnum, tb.* FROM (
			SELECT cartId, amountAll, to_char(enrollDate, 'yyyy.mm.dd') enrollDate, 
           c.productId, productName, brand, sellingPrice, (amountAll * sellingPrice) totalPrice, 
           memberId, c.optionId, optionContent
			FROM cart c
            join productOption o
            on c.optionId = o.optionId
            join product p
            on c.productId = p.productId
            where memberId = #{memberId}
			ORDER BY enrollDate
	<![CDATA[
			) tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>
	</select>
	
	<delete id="deleteCart" parameterType="Integer">
	delete from cart where cartId = #{cartId}
	</delete>
	
	<update id="updateCart" parameterType="map">
	update cart set enrolldate=sysdate, amountAll=#{amount}
	where cartId=#{cartId} and productId=#{productId} and optionId=#{optionId} and memberId=#{memberId}
	</update>
	
	<!-- <update id="insertOrder" parameterType="care.dog.store.Order">
	insert all
	into orderDetail(orderDetailId, orderAmount, orderPrice, note, productId) 
	values(orderDetail_seq.NEXTVAL, #{orderAmount}, #{orderPrice}, #{note}, #{productId})
	into productOrder(orderId, orderAllPrice, orderDetailId, memberId) 
	values(order_seq.NEXTVAL, #{orderPrice}, orderDetail_seq.CURRVAL, #{memberId})
	select * from dual
	</update> -->
	
	<select id="orderSeq" resultType="Integer">
		SELECT order_seq.NEXTVAL FROM DUAL
	</select>
	
	<insert id="insertProductOrder" parameterType="care.dog.store.Order">
	insert into productOrder(orderId, orderAllPrice, memberId) 
		values(#{orderId}, #{orderAllPrice}, #{memberId})
	</insert>
	
	<insert id="insertOrderDetail" parameterType="care.dog.store.Order">
	insert into orderDetail(orderDetailId, orderAmount, orderPrice, note, productId, orderId)
		values(orderDetail_seq.NEXTVAL, #{orderAmount}, #{orderPrice}, 
		#{note}, #{productId}, #{orderId})
	</insert>
	
	<insert id="insertPayment" parameterType="care.dog.store.Order">
	insert into payment(orderId, payId) 
		values(#{orderId}, payment_seq.NEXTVAL)
	</insert>
	
	<!-- <update id="insertOrderOne" parameterType="map">
	insert all
	into orderDetail(orderDetailId, orderAmount, orderPrice, note, productId) 
	values(orderDetail_seq.NEXTVAL, #{amount}, #{totalPrice}, #{optionContent}, #{productId})
	into productOrder(orderId, orderAllPrice, orderDetailId, memberId) 
	values(order_seq.NEXTVAL, #{totalPrice}, orderDetail_seq.CURRVAL, #{memberId})
	select * from dual
	</update> -->
	
	<select id="listOrder" parameterType="map" resultType="care.dog.store.Order">
	SELECT * FROM (
		SELECT ROWNUM rnum, tb.* FROM (
			SELECT po.orderId, orderAllPrice, to_char(orderDate, 'yyyy.mm.dd') orderDate, 
           		orderstate, memberId, orderAmount, orderPrice, note,
           		brand, productName, o.productId
			FROM productOrder po
            	join orderDetail o
            	on po.orderId = o.orderId
            	join product p
            	on o.productId = p.productId
            where memberId = #{memberId}
			ORDER BY orderDate
	<![CDATA[
			) tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>
	</select>
	
	<select id="dataCountOrder" parameterType="String" resultType="Integer">
	SELECT NVL(COUNT(*), 0) 
	FROM productOrder po
    	join orderDetail o
		on po.orderId = o.orderId
		join product p
		on o.productId = p.productId
	where memberId=#{memberId}
	</select>
	
</mapper>




